/**
 * Mule Paypal Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.module.paypal.integration;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mule.module.paypal.CurrencyCode;
import org.mule.module.paypal.Enums;
import org.mule.module.paypal.FMFPendingTransactionAction;
import org.mule.module.paypal.PaymentActionCode;
import org.mule.module.paypal.PaypalCloudConnector;
import org.mule.module.paypal.ReceiverInfoCode;
import org.mule.module.paypal.soap.SoapPaypalFacade;

import ebay.api.paypalapi.DoCaptureResponseType;
import ebay.api.paypalapi.DoDirectPaymentResponseType;
import ebay.api.paypalapi.DoVoidResponseType;
import ebay.api.paypalapi.GetBalanceResponseType;
import ebay.api.paypalapi.GetPalDetailsResponseType;
import ebay.api.paypalapi.GetTransactionDetailsResponseType;
import ebay.api.paypalapi.ManagePendingTransactionStatusResponseType;
import ebay.api.paypalapi.MassPayRequestItemType;
import ebay.api.paypalapi.MassPayResponseType;
import ebay.apis.corecomponenttypes.BasicAmountType;
import ebay.apis.eblbasecomponents.AckCodeType;
import ebay.apis.eblbasecomponents.AddressType;
import ebay.apis.eblbasecomponents.CountryCodeType;
import ebay.apis.eblbasecomponents.CreditCardTypeType;
import ebay.apis.eblbasecomponents.CurrencyCodeType;
import ebay.apis.eblbasecomponents.PayerInfoType;
import ebay.apis.eblbasecomponents.PersonNameType;

public class PaypalTestDriver
{
    private PaypalCloudConnector connector;
    private SoapPaypalFacade facade;
    private String buyerEmailAddress;
    
    
    @Before
    public void setUp() 
    {       
        final String username = System.getenv("paypal.api_username");
        final String password = System.getenv("paypal.api_password");
        final String signature = System.getenv("paypal.api_signature");
        buyerEmailAddress = System.getenv("paypal.buyer_email");
        
        facade = new SoapPaypalFacade(username, password, signature, null);
        connector = new PaypalCloudConnector(facade);
        connector.setDefaultCurrency(CurrencyCode.USD);
    }

    
    @Test
    /** Gets configured account's balance */
    public void testGetBalance() 
    {
        final GetBalanceResponseType response = connector.getBalance(true);
        Assert.assertNotNull(response.getBalance());
        Assert.assertTrue(StringUtils.isNotBlank(response.getBalance().getValue()));
    }
    
    @Test
    /** Gets configured account's details */
    public void testPalDetails() 
    {
        GetPalDetailsResponseType palDetails = connector.getPalDetails();
        Assert.assertTrue(StringUtils.isNotBlank(palDetails.getPal()));
    }
    

    @Test
    /** Generates a credit card payment */
    public void testDirectPayment() 
    {
        final DoDirectPaymentResponseType payment = doDirectPayment("10.0");
        Assert.assertNotNull(payment.getTransactionID());
    }

    @Test
    /** Gets details of a previously created test transaction */
    public void testGetTransactionDetails() 
    {
        final DoDirectPaymentResponseType payment = doDirectPayment("10.0");
        GetTransactionDetailsResponseType transactionDetails 
        = connector.getTransactionDetails(payment.getTransactionID());
        final PersonNameType payerName = transactionDetails
                                        .getPaymentTransactionDetails()
                                        .getPayerInfo()
                                        .getPayerName();
        Assert.assertEquals("John", payerName.getFirstName());
        Assert.assertEquals("Doe", payerName.getLastName());
    }

    @Test
    /** Generates a delayed payment and then voids the authorization */
    public void testDoVoid()
    {
       
        final String authId = doDirectPayment("10.0").getTransactionID();
        final DoVoidResponseType response = connector.doVoid(authId, null);
        Assert.assertEquals(authId, response.getAuthorizationID());
    }

    @Test
    /** Generates a delayed payment and then captures the funds */
    public void testCapture() 
    {
        final DoDirectPaymentResponseType payment = doDirectPayment("10.0");
        final BasicAmountType amount = payment.getAmount();
        final String authId = payment.getTransactionID();
        
        System.out.println("************************************");
        System.out.println(ToStringBuilder.reflectionToString(payment));
        System.out.println("************************************");
        
        final DoCaptureResponseType response = connector.capture(authId, true, amount.getValue(), 
                                                        Enums.translate(amount.getCurrencyID(), CurrencyCode.class), null, null, null);
        Assert.assertEquals(AckCodeType.SUCCESS, response.getAck());
        Assert.assertEquals(authId, response.getDoCaptureResponseDetails().getAuthorizationID());
    }

    @Test
    public void testMassPay() 
    {
        final LinkedList<MassPayRequestItemType> massPayItems = new LinkedList<MassPayRequestItemType>();
        final MassPayRequestItemType item = new MassPayRequestItemType();
        final BasicAmountType amount = new BasicAmountType();
        amount.setValue("10.0");
        amount.setCurrencyID(CurrencyCodeType.USD);
        item.setAmount(amount);
        item.setReceiverEmail(buyerEmailAddress);
        massPayItems.add(item);
        MassPayResponseType response = connector.massPay("Payment", massPayItems, ReceiverInfoCode.EMAIL_ADDRESS);
        Assert.assertEquals(AckCodeType.SUCCESS, response.getAck());
    }
    
    @Test
    public void testManagePendingTransactionStatus() 
    {
        final DoDirectPaymentResponseType payment = doDirectPayment("150.0");
        final String authId = payment.getTransactionID();
        ManagePendingTransactionStatusResponseType response 
            = connector.managePendingTransactionStatus(authId, FMFPendingTransactionAction.ACCEPT);
        Assert.assertEquals(AckCodeType.SUCCESS, response.getAck());
    }
    
    /* Generates a sample credit card payment */
    @SuppressWarnings("serial")
    private DoDirectPaymentResponseType doDirectPayment(final String value) 
    {
        final PayerInfoType payerInfo = new PayerInfoType();
        AddressType address = new AddressType();
        address.setStreet1("1 Main St.");
        address.setCityName("San Jose");
        address.setStateOrProvince("CA");
        address.setCountry(CountryCodeType.US);
        address.setPostalCode("95131");
        payerInfo.setAddress(address);
        PersonNameType name = new PersonNameType();
        name.setFirstName("John");
        name.setLastName("Doe");
        payerInfo.setPayerName(name);
        
        Map<String,Object> cardDetails = new HashMap<String, Object>() {{
            put("creditCardType", CreditCardTypeType.VISA);
            put("creditCardNumber", "4972116789019528");
            put("CVV2", "123");
            put("expMonth", 4);
            put("expYear", 2016);
            put("cardOwner", payerInfo);
        }};
        
        final BasicAmountType amount = new BasicAmountType();
        amount.setValue(value);
        amount.setCurrencyID(CurrencyCodeType.USD);
        
        Map<String,Object> paymentDetails = new HashMap<String, Object>() {{
            put("orderTotal", amount);
        }};
        
        return connector.doDirectPayment("127.0.0.1", 
            cardDetails, paymentDetails,
            PaymentActionCode.AUTHORIZATION, false);
    }
    
}


