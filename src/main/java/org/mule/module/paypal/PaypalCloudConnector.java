/**
 * Mule Paypal Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.module.paypal;

import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.apache.commons.lang.Validate;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.module.paypal.soap.SoapPaypalFacade;
import org.mule.modules.utils.mom.JaxbMapObjectMappers;

import com.zauberlabs.commons.mom.MapObjectMapper;

import ebay.api.paypalapi.AddressVerifyResponseType;
import ebay.api.paypalapi.DoAuthorizationResponseType;
import ebay.api.paypalapi.DoCaptureResponseType;
import ebay.api.paypalapi.DoDirectPaymentResponseType;
import ebay.api.paypalapi.DoReauthorizationResponseType;
import ebay.api.paypalapi.DoVoidResponseType;
import ebay.api.paypalapi.GetBalanceResponseType;
import ebay.api.paypalapi.GetPalDetailsResponseType;
import ebay.api.paypalapi.GetTransactionDetailsResponseType;
import ebay.api.paypalapi.ManagePendingTransactionStatusResponseType;
import ebay.api.paypalapi.MassPayRequestItemType;
import ebay.api.paypalapi.MassPayResponseType;
import ebay.api.paypalapi.RefundTransactionResponseType;
import ebay.apis.corecomponenttypes.BasicAmountType;
import ebay.apis.eblbasecomponents.CompleteCodeType;
import ebay.apis.eblbasecomponents.CreditCardDetailsType;
import ebay.apis.eblbasecomponents.CurrencyCodeType;
import ebay.apis.eblbasecomponents.PaymentDetailsType;

/**
 * Cloud connector for Paypal. 
 * 
 * <p>
 * PayPal is a service that enables you to pay, send
 * money, and accept payments without revealing your financial information.
 * </p>
 * <p>
 * PayPal acts like a digital wallet where you can securely store all your payment
 * options, such as your bank account and credit card. When you want to make a
 * payment, you don't have to pull out your credit card or type your billing info
 * every time. Simply click on the PayPal checkout button, log in to your PayPal
 * account, and select your preferred payment method. We'll complete the payment
 * processâ€”without sharing your info with merchants and sellers.
 * </p>
 * <p>
 * This connector lets mule users to perform
 * <ul> 
 * <li><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_dcc_hub-outside">Direct Payments</a></li>
 * <li><a href="https://cms.paypal.com/us/cgi-bin/?cmd=_render-content&content_ID=developer/howto_admin_authcapture">Authorization and capture</a></li>
 * <li>Void transactions</li>
 * <li>Reauthorize transactions</li>
 * <li>Address validation</li>
 * <li>Balance check</li>
 * </ul>
 * 
 * </p>
 * @author MuleSoft, inc.
 */
@Module(name = "paypal", schemaVersion = "2.0")
public class PaypalCloudConnector 

{
    private PaypalFacade facade;

    /** Paypal username */
    @Configurable
    private String username;

    /** Paypal password */
    @Configurable
    private String password;

    /*** Default currency used if none is specified in the operation */
    @Configurable
    @Optional
    private CurrencyCode defaultCurrency;

    /**
     * PayPal-generated unique digital signature.
     */
    @Configurable
    private String signature;

    /**
     * An indicator in an API call of the account for whom the call is being made
     */
    @Configurable
    @Optional
    private String subject;
    private final MapObjectMapper mom = JaxbMapObjectMappers.defaultWithPackage("ebay.apis").build();

    public PaypalCloudConnector()
    {
        // default constructor
    }

    /**
     * Advanced constructor
     * 
     * @param paypalFacade facade that performs the operations
     */
    public PaypalCloudConnector(final PaypalFacade paypalFacade)
    {
        facade = paypalFacade;
    }

    @PostConstruct
    public void initialise() throws InitialisationException
    {
        if (facade == null)
        {
            facade = PaypalFacadeAdaptor.adapt(new SoapPaypalFacade(username, password, signature, subject));
        }
    }

    /**
     * Obtain the available balance for a PayPal account.
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:get-balance}
     * 
     * @param returnAllCurrencies If true, returns the balance for each currency 
     *          holding, otherwise only the balance for the primary currency holding
     * @return the balance for the account GetBalanceResponseType
     */
    @Processor
    public GetBalanceResponseType getBalance(@Optional @Default("true") final Boolean returnAllCurrencies)
    {
        return facade.getBalance(returnAllCurrencies);
    }

    /**
     * Confirms whether a postal address and postal code match those of the specified
     * PayPal account holder. 
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:address-verify}
     * 
     * @param email the email of the account's holder
     * @param street the street to verify
     * @param zip the zip address to verify
     * @return AddressVerifyResponseType with the confirmation status of for
     *         parameter.
     */
    @Processor
    public AddressVerifyResponseType addressVerify(final String email, final String street, final String zip)
    {
        return facade.addressVerify(email, street, zip);
    }

    /**
     * Capture an authorized payment. 
     * 
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:capture}
     * 
     * @param authorizationId The authorization identification number of the payment
     *            you want to capture. This is the transaction id returned from
     *            DoExpressCheckoutPayment or DoDirectPayment. Character length and
     *            limits: 19 single-byte characters maximum.
     * @param amount Amount to capture. Limitations: Value is a positive number which
     *            cannot exceed $10,000 USD in any currency. No currency symbol. Must
     *            have two decimal places, decimal separator must be a period (.),
     *            and the optional thousands separator must be a comma (,).
     * @param amountCurrency The currency in which amount is expressed. If it is
     *            null, then the defaultCurrency is used.
     * @param complete The value Complete indicates that this the last capture you
     *            intend to make. The value NotComplete indicates that you intend to
     *            make additional captures
     * @param invoiceId Your invoice number or other identification number that is
     *            displayed to the merchant and customer in his transaction history.
     *            NOTE: This value on DoCapture will overwrite a value previously set
     *            on DoAuthorization. NOTE: The value is recorded only if the
     *            authorization you are capturing is an order authorization, not a
     *            basic authorization. Character length and limits: 127 single-byte
     *            alphanumeric characters.
     * @param note An informational note about this settlement that is displayed to
     *            the payer in email and in his transaction history. Character length
     *            and limits: 255 single-byte characters.
     * @param softDescriptor The soft descriptor is a per transaction description of
     *            the payment that is passed to the consumer's credit card statement.
     * @return A DoCaptureResponseType. Only the authorization ID, transaction ID,
     *         transaction type, payment date, gross amount and payment status are
     *         guaranteed to be returned. If you need the values of other fields and
     *         they are not returned, you can obtain their values later by calling
     *         GetTransactionDetails or by using the reporting mechanism.
     */
    @Processor
    public DoCaptureResponseType capture(final String authorizationId,
                                         final boolean complete,
                                         final String amount,
                                         @Optional final CurrencyCode amountCurrency,
                                         @Optional final String invoiceId,
                                         @Optional final String note,
                                         @Optional final String softDescriptor)
    {
        return facade.capture(authorizationId, getCompleteCode(complete), getAmount(amount, amountCurrency),
            invoiceId, note, softDescriptor);
    }

    /**
     * Authorize a payment
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:authorize}
     * @param transactionId
     *          The value of the order's transaction identification number 
     *          returned by PayPal.
     *          Character length and limits: 19 single-byte characters maximum.
     * @param amount
     *          Amount to authorize.
     *          Limitations: Value is a positive number which cannot exceed 
     *          $10,000 USD in any currency. No currency symbol. Must have two 
     *          decimal places, decimal separator must be a period (.), and the 
     *          optional thousands separator must be a comma (,).
     * @param amountCurrency The currency in which amount is expressed. 
     *          If it is null, then the defaultCurrency is used.             
     * @param transactionEntity
     *          Type of transaction to authorize. The only allowable value is Order,
     *          which means that the transaction represents a customer order that
     *          can be fulfilled over 29 days.
     * @return DoAuthorizationResponseType with transaction and 
     *          authorization information.
     */
    @Processor
    public DoAuthorizationResponseType authorize(final String transactionId,
                                                 final String amount,
                                                 @Optional final CurrencyCode amountCurrency,
                                                 @Optional final TransactionEntity transactionEntity)
    {
        return facade.authorize(transactionId, getAmount(amount, amountCurrency),
            transactionEntity != null ? transactionEntity.toPaypalType() : null);
    }

    /**
     * Obtain your Pal ID, which is the PayPal-assigned merchant account number, 
     * and other information about your account. You need the account number when 
     * working with dynamic versions of PayPal buttons and logos.
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:get-pal-details}
     * 
     * @return GetPalDetailsResponseType with the account details.
     */
    @Processor
    public GetPalDetailsResponseType getPalDetails()
    {
        return facade.getPalDetails();
    }
    
    /**
     * Reauthorize an amount for a previously authorized transaction.
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:re-authorize}
     * @param authorizationId
     *          The value of a previously authorized transaction identification 
     *          number returned by PayPal.
     *          Character length and limits: 19 single-byte characters maximum.
     * @param amount
     *          Amount to reauthorize.
     *          Limitations: Value is a positive number which cannot exceed 
     *          $10,000 USD in any currency. No currency symbol. Must have two 
     *          decimal places, decimal separator must be a period (.), and the 
     *          optional thousands separator must be a comma (,).
     * @param amountCurrency The currency in which amount is expressed. 
     *          If it is null, then the defaultCurrency is used.
     *          
     * @return DoReauthorizationResponseType containing payment status
     *          and the new  authorization identification number.
     */
    @Processor
    public DoReauthorizationResponseType reAuthorize(final String authorizationId,
                                                     final String amount,
                                                     @Optional final CurrencyCode amountCurrency)
    {
        return facade.reAuthorize(authorizationId, getAmount(amount, amountCurrency));
    }
    
    /**
     * Void an order or an authorization.
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:do-void}
     * @param authorizationId
     *          The original authorization ID specifying the authorization to 
     *          void or, to void an order, the order ID.
     *          IMPORTANT: If you are voiding a transaction that has been 
     *          reauthorized, use the ID from the original authorization, and 
     *          not the reauthorization.
     *          Character length and limits: 19 single-byte characters.
     * @param note
     *          An informational note about this void that is displayed to the 
     *          payer in email and in his transaction history.
     *          Character length and limits: 255 single-byte characters
     *          
     * @return a {@link DoVoidResponseType}
     */
    @Processor
    public DoVoidResponseType doVoid(final String authorizationId, @Optional final String note)
    {
        return facade.doVoid(authorizationId, note);
    }
    
    /**
     * Obtain information about a specific transaction.
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:get-transaction-details}
     * 
     * @param transactionId
     *          Unique identifier of a transaction.
     *          NOTE: The details for some kinds of transactions cannot be 
     *          retrieved with GetTransactionDetails. You cannot obtain details 
     *          of bank transfer withdrawals, for example.
     *          Character length and limitations: 17 single-byte alphanumeric 
     *          characters.
     * @return GetTransactionDetailsResponseType with the transaction details.
     */
    @Processor
    public GetTransactionDetailsResponseType getTransactionDetails(final String transactionId)
    {
        return facade.getTransactionDetails(transactionId);
    }
    
    /**
     * Accept or deny a pending transaction held by Fraud Management Filters.
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:manage-pending-transaction-status}
     * @param transactionId
     *          The transaction ID of the payment transaction.
     * @param action
     *          The operation you want to perform on the transaction, which is 
     *          one of the following actions:
     *          () Accept - accepts the payment
     *          () Deny - rejects the payment
     * @return ManagePendingTransactionStatusResponseType with the
     *          ID and current status of the transactin.
     */
    @Processor
    public ManagePendingTransactionStatusResponseType managePendingTransactionStatus(final String transactionId,
                                                                                     final FMFPendingTransactionAction action)
    {
        return facade.managePendingTransactionStatus(transactionId, action.toPaypalType());
    }
    
    /**
     * Issue a refund to the PayPal account holder associated with a transaction.
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:refund-transaction}
     * @param transactionId
     *          Unique identifier of a transaction.
     *          Character length and limitations: 17 single-byte alphanumeric characters.
     * @param invoiceId
     *          Your own invoice or tracking number.
     *          Character length and limitations: 127 single-byte alphanumeric characters
     * @param refundType
     *          Type of refund you are making:
     *          () Full - default
     *          () Partial
     * @param amount
     *          Refund amount. Amount is required if RefundType is Partial.
     *          NOTE: If RefundType is not specified, do not set the Amount.
     * @param amountCurrency The currency in which amount is expressed. 
     *          If it is null, then the defaultCurrency is used.
     * @param memo
     *          Custom memo about the refund.
     *          Character length and limitations: 255 single-byte alphanumeric characters.
     * @return  RefundTransactionResponseType with information about 
     *          the refunded amount (transaction fee redunded, gross, net and 
     *          total refunded amount)
     */
    @Processor
    public RefundTransactionResponseType refundTransaction(final String transactionId,
                                                           @Optional final String invoiceId,
                                                           final Refund refundType,
                                                           final String amount,
                                                           @Optional final CurrencyCode amountCurrency,
                                                           @Optional final String memo)
    {
        BasicAmountType amountAndCurrency = null;
        if (refundType.equals(Refund.PARTIAL))
        {
            amountAndCurrency = getAmount(amount, amountCurrency);
        }
        return facade.refundTransaction(transactionId, invoiceId, refundType.toPaypalType(), amountAndCurrency, memo);
    }

    /**
     * Make a payment to one or more PayPal account holders.
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:mass-pay}
     * @param emailSubject
     *          The subject line of the email that PayPal sends when 
     *          the transaction is completed. The subject line is the same for 
     *          all recipients.
     *          Character length and limitations: 255 single-byte alphanumeric characters.
     * @param massPayItems
     *          Details of each payment.
     *          NOTE: A single request can include up to 250 MassPayItems.
     * @param receiverType
     *          Indicates how you identify the recipients of payments 
     *          in this call to MassPay. Must be EmailAddress or UserID.
     * @return  MassPayResponseType with no specific information about 
     *          the payments.
     */
    @Processor
    public MassPayResponseType massPay(final String emailSubject,
                                       final List<MassPayRequestItemType> massPayItems,
                                       final ReceiverInfoCode receiverType)
    {
        return facade.massPay(emailSubject, massPayItems, receiverType.toPaypalType());
    }
    
    /**
     * Process a credit card payment.
     * 
     * {@sample.xml ../../../doc/mule-module-paypal.xml.sample paypal:do-direct-payment}
     * 
     * @param ipAddress
     *          IP address of the payer's browser.
     *          NOTE: PayPal records this IP addresses as a means to detect possible fraud.
     *          Character length and limitations: 15 single-byte characters, including periods, 
     *          for example: 255.255.255.255. 
     * @param cardDetails
     *          Credit card details
     * @param paymentDetails
     *          Payment details
     * @param paymentAction
     *          How you want to obtain payment:
     *          () "Authorization" indicates that this payment is a basic 
     *          authorization subject to settlement with PayPal Authorization & Capture.
     *          () "Sale" indicates that this is a final sale for which you are requesting payment.
     * @param setReturnFMFDetails
     *          Flag to indicate whether you want the results returned by 
     *          Fraud Management Filters. By default, you do not receive this information.
     * @return  DoDirectPaymentResponseType with information about the payment.
     */
    @Processor
    public DoDirectPaymentResponseType doDirectPayment(final String ipAddress,
                                                       final Map<String,Object> cardDetails,
                                                       final Map<String,Object> paymentDetails,
                                                       @Optional final PaymentActionCode paymentAction,
                                                       @Optional final Boolean setReturnFMFDetails)
    {
        Integer returnFMFDetails = null;
        if (setReturnFMFDetails != null)
        {
            returnFMFDetails = setReturnFMFDetails ? 1 : 0;
        }
        
        
        return facade.doDirectPayment(ipAddress, 
            (CreditCardDetailsType) mom.unmap(cardDetails, CreditCardDetailsType.class),
            (PaymentDetailsType) mom.unmap(paymentDetails, PaymentDetailsType.class),
            paymentAction != null ? paymentAction.toPaypalType() : null, returnFMFDetails);
    }

    protected CompleteCodeType getCompleteCode(final Boolean complete) 
    {
        return complete ? CompleteCodeType.COMPLETE : CompleteCodeType.NOT_COMPLETE;
    }
    
    /**
     * Builds a BasicAmountType to use in operations.
     * @param value     the amount
     * @param currency  the currency received as a paremeter. 
     *                  could be null if the default currency is specified.
     * @return BasicAmountType with the given value and currency.
     */
    protected BasicAmountType getAmount(final String value, final CurrencyCode currency)
    {
        final BasicAmountType ret = new BasicAmountType();
        ret.setValue(value);
        ret.setCurrencyID(getCurrency(currency));
        return ret;
    }

    /**
     * Returns the currency to use in operations
     * 
     * @param actualParameter the currency parameter passed to the operation.
     * @return if a currency is specified, returns the parameter. otherwise returns
     *         the default currency.
     */
    protected CurrencyCodeType getCurrency(final CurrencyCode actualParameter)
    {
       return coalesceCurrencyToDefaultCurrency(actualParameter).toPaypalType();
    }
    
    protected CurrencyCode coalesceCurrencyToDefaultCurrency(CurrencyCode currencyCode) {
        return currencyCode != null ? currencyCode : getConfiguredDefaultCurrency();
    }

    private CurrencyCode getConfiguredDefaultCurrency()
    {
        Validate.notNull(defaultCurrency,
            "No amountCourrency given (and a defaultCurrency wasn't configured)");
        return getDefaultCurrency();
    }

    public String getUsername()
    {
        return username;
    }

    public String getPassword()
    {
        return password;
    }

    public String getSignature()
    {
        return signature;
    }

    public String getSubject()
    {
        return subject;
    }

    public void setUsername(final String username)
    {
        this.username = username;
    }

    public void setPassword(final String password)
    {
        this.password = password;
    }

    public void setSignature(final String signature)
    {
        this.signature = signature;
    }

    public void setSubject(final String subject)
    {
        this.subject = subject;
    }

    public CurrencyCode getDefaultCurrency()
    {
        return defaultCurrency;
    }

    public void setDefaultCurrency(CurrencyCode defaultCurrency)
    {
        this.defaultCurrency = defaultCurrency;
    }

    public PaypalFacade getFacade()
    {
        return facade;
    }

    public void setFacade(PaypalFacade facade)
    {
        this.facade = facade;
    }

    
}
