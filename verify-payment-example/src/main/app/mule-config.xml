<?xml version="1.0" encoding="UTF-8"?>
<!--

    Mule Paypal Cloud Connector

    Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com

    The software in this package is published under the terms of the CPAL v1.0
    license, a copy of which has been included with this distribution in the
    LICENSE.txt file.

-->
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:paypal="http://www.mulesoft.org/schema/mule/paypal"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
    xmlns:mongodb="http://www.mulesoft.org/schema/mule/mongodb"
	xsi:schemaLocation=
		"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	    http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.1/mule.xsd
	    http://www.mulesoft.org/schema/mule/paypal http://www.mulesoft.org/schema/mule/paypal/2.0/mule-paypal.xsd
	    http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/3.1/mule-smtp.xsd
	    http://www.mulesoft.org/schema/mule/mongodb http://www.mulesoft.org/schema/mule/mongodb/3.1/mule-mongodb.xsd
	    http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.0/mule-http.xsd">

    <custom-transformer name="HttpRequestBodyToParamMap" class="org.mule.transport.http.transformers.HttpRequestBodyToParamMap" />
    <custom-transformer name="ParamMapToTestPayloadTransformer" class="org.mule.module.paypal.test.verify.ParamMapToTestPayloadTransformer" />

    <http:connector name="HttpConnector" enableCookies="true" keepAlive="true"/>
    <mongodb:connector name="mongodb" database="${mongo_database}" hostname="${mongo_hostname}" />
    <smtp:gmail-connector name="email"/>
    
	<paypal:config username="${paypal_api_username}" password="${paypal_api_password}"
		signature="${paypal_api_signature}" defaultCurrency="USD" />

    <flow name="httpTriggeredPaymentDemo">
        <http:inbound-endpoint host="localhost" port="9091" path="paypal-demo-verify-payment" />
        <transformer ref="HttpRequestBodyToParamMap"/>
        <transformer ref="ParamMapToTestPayloadTransformer"/>
        <flow-ref name="paymentDemo" />
        <expression-transformer>
            <return-argument evaluator="string" expression="" />
        </expression-transformer>
    </flow>

	<flow name="paymentDemo">
		<choice>
			<when evaluator="ognl" expression="paymentDetails.orderTotal.value&gt;=${paypal_payment_limit}">

				<enricher target="#[variable:ValidUser]">
				    <flow-ref name="checkUserId" />  
				</enricher>
                
                <flow-ref name="doDirectPayment"/>
				
				<choice>
					<when evaluator="variable" expression="ValidUser=1">
					   <paypal:manage-pending-transaction-status action="ACCEPT" transactionId="#[ognl:transactionID]" />
					</when>
					<otherwise>
					   <flow-ref name="emailWarning" />
					</otherwise>
				</choice>

			</when>

			<otherwise>
                <flow-ref name="doDirectPayment"/>
			</otherwise>

		</choice>
	</flow>

    <flow name="doDirectPayment">
        <paypal:do-direct-payment ipAddress="#[ognl:ipAddress]"
            cardDetails="#[ognl:cardDetails]" paymentDetails="#[ognl:paymentDetails]"
            paymentAction="AUTHORIZATION" />
    </flow>

	<flow name="checkUserId">
		<description>
			Receives the payment information and checks if the user is trusted
			to make the payment.
	    </description>
		<mongodb:outbound-endpoint collection="authorizedUsers"
			query='{ "userId" : "#[ognl:cardDetails.cardOwner.payerID]" }'
			exchange-pattern="request-response" />
		<choice>
			<when evaluator="ognl" expression="isEmpty()">
			    <logger level="DEBUG" message="User not found." />
				<expression-transformer>
					<return-argument evaluator="string" expression="0" />
				</expression-transformer>
			</when>
			<otherwise>
			    <logger level="ERROR" message="User found." />
				<expression-transformer>
					<return-argument evaluator="string" expression="1" />
				</expression-transformer>
			</otherwise>
		</choice>
	</flow>

    <flow name="emailWarning">
        <description>
            Sends an email warning about a payment that needs to be
            manually accepted to pass Fraud Management Control.
        </description>
		<expression-transformer>
			<return-argument evaluator="string"
				expression="Payment #[ognl:transactionID] was received via Mule.
				        The amount exceeds the limit you specified and payer was
				        not found in trusted users database. Please verify this
				        payment in Paypal" />
		</expression-transformer>
		      <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="${smtp_username}" 
		      password="${smtp_password}" from="${smtp_fromAddress}" to="${smtp_toAddress}" 
		      subject="Mule payment awaiting Fraud Management Control verification" />
    </flow>
	
</mule>
